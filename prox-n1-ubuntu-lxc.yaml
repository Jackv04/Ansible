- name: Install community.general Ansible Galaxy collectioncollection
  hosts: localhost
  tasks: 
    - name: Install community.general collection
      ansible.builtin.command: ansible-galaxy collection install community.general

- name: Get existing LXC container IDs on all nodes
  hosts: all
  gather_facts: false
  tasks:
    - name: Get existing LXC container IDs
      set_fact:
        existing_lxc_ids: 
          shell: pct list | awk '{print $1}' || true
      register: result
     
- name: Proxmox LXC Cloning
  hosts: "{{ 'node' + NODE_CHOICE }}"
  tasks:
    - name: Set variables based on NODE_CHOICE
      set_fact:
        node: "{{ 'node' + NODE_CHOICE }}"
        host: "{{ '10.10.0.' + NODE_CHOICE + '0' }}"
        cloneid: "{{ 900 + NODE_CHOICE | int }}"

    - name: Display configured values
      debug:
        msg: "Configured settings - Node: {{ node }}, Host: {{ host }}, Cloneid: {{ cloneid }}"

    - name: Determine Hostname
      set_fact:
        yeppers: "ubuntu-{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"

    - name: Determine the next available LXC ID across all nodes
      set_fact:
        next_lxc_id: "{{ range(100, 1000) | difference(result.existing_lxc_ids.stdout_lines | map('int')) | first }}"

    - name: Display the next available LXC ID
      debug:
        var: next_lxc_id

    - name: Clone LXC
      community.general.proxmox:
        vmid: "{{ next_lxc_id }}"
        node: "{{ node }}"
        api_user: root@pam
        api_password: "{{ lookup('env', 'PASSWORD') }}"
        api_host: "{{ host }}"
        hostname: "{{ HOSTNAME_CHOICE }}"
        clone: "{{ cloneid }}"
        storage: local
        timeout: 180

    - name: Start LXC container
      community.general.proxmox:
        api_user: root@pam
        api_password: "{{ lookup('env', 'PASSWORD') }}"
        api_host: "{{ host }}"
        vmid: "{{ next_lxc_id }}"  # Use the variable created earlier
        node: "{{ node }}"
        state: started

    - name: get LXC container ID
      shell: pct list | grep "{{ HOSTNAME_CHOICE }}" | awk '{ print $1 }'
      register: thelxcid

    - name: debug LXC container ID
      debug:
        var: thelxcid.stdout

    - name: Pause for 1 minute to build app cache
      ansible.builtin.pause:
        minutes: 1

    - name: get LXC container IP
      shell: pct exec "{{ next_lxc_id }}" -- ip a show dev eth0 | grep -oP 'inet \K\S+'
      register: theip

    - name: debug LXC container IP
      debug:
        var: theip.stdout

    - name: Slack Notification
      community.general.slack:
        token: "{{ lookup('env', 'TOKEN') }}"
        msg: |
          ### Your LXC Container is READY!! ###
          --------------------------------------
          `Container`: "{{ HOSTNAME_CHOICE }}"
          {% if theip is defined %}
          `IP ADDRESS`: "{{ theip.stdout }}"
          'URL': ssh://user@{{ theip.stdout }}
          {% else %}
          `IP ADDRESS`: Not available
          'URL': Not available
          {% endif %}
          --------------------------------------
        channel: '#ansible'
        color: good
        username: 'Ansible on {{ inventory_hostname }}'
        link_names: 0
        parse: 'none'
      ignore_errors: true
