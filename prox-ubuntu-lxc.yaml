- name: Install community.general Ansible Galaxy collectionnode{{ NODE }}
  hosts: localhost
  tasks:
    - name: Install community.general collection
      ansible.builtin.command: ansible-galaxy collection install community.general

- name: Get existing LXC container IDs on NODE3
  hosts: all
  tasks:
    - name: Get existing LXC container IDs
      ansible.builtin.shell: pct list | awk '{print $1}' || true
      register: existing_lxc_ids

- name: Proxmox LXC Cloning
  hosts: node{{ NODE }}
  vars:
    container_name: ubuntu
  tasks:
    - name: Determine Hostname
      set_fact:
        yeppers: "ubuntu-{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"

    - name: Determine the next available LXC ID
      set_fact:
        next_lxc_id: "{{ (range(1, 1000) | reject('in', existing_lxc_ids.stdout_lines | map('int') | list) | list | random) }}"

    - name: Display the next available LXC ID
      debug:
        var: next_lxc_id

    # - name: Clone LXC
    #   community.general.proxmox:
    #     vmid: "{{ next_lxc_id }}"
    #     node: node{{ NODE }}
    #     api_user: root@pam
    #     api_password: "{{ lookup('env', 'PASSWORD') }}"
    #     api_host: 10.10.0.{{ NODE }}0
    #     hostname: "{{ HOSTNAME }}"
    #     clone: 90{{ NODE }}
    #     clone_type: full
    #     storage: local
    #     timeout: 180

    - name: Create LXC container
      community.general.proxmox:
        api_user: root@pam
        api_password: "{{ lookup('env', 'PASSWORD') }}"
        api_host: 10.10.0.{{ NODE }}0
        password: "{{ lookup('env', 'PASSWORD') }}"
        hostname: "{{ HOSTNAME }}"
        vmid: "{{ next_lxc_id }}"  # Use the variable created earlier
        node: node{{ NODE }}
        cores: '2'
        cpus: '1'
        ostemplate: 'local:vztmpl/ubuntu-23.04-standard_23.04-1_amd64.tar.zst'
        storage: 'local-lvm'
        disk: '8'
        memory: '1024'
        netif: '{"net0":"name=eth0,ip=dhcp/,ip6=dhcp,bridge=vmbr0"}'
        state: present

    - name: Start LXC container
      community.general.proxmox:
        api_user: root@pam
        api_password: "{{ lookup('env', 'PASSWORD') }}"
        api_host: 10.10.0.{{ NODE }}0
        vmid: "{{ next_lxc_id }}"  # Use the variable created earlier
        node: node{{ NODE }}
        state: started

    - name: get LXC container ID
      ansible.builtin.shell: pct list | grep "{{ HOSTNAME }}" | awk '{ print $1 }'
      register: thelxcid

    - name: debug LXC container ID
      debug:
        var: thelxcid.stdout

    - name: Pause for 1 minute to build app cache
      ansible.builtin.pause:
        minutes: 1

    - name: get LXC container IP
      ansible.builtin.shell: pct exec "{{ next_lxc_id }}" -- ip a show dev eth0 | grep -oP 'inet \K\S+'
      register: theip

    - name: debug LXC container IP
      debug:
        var: theip.stdout

    - name: Slack Notification
      community.general.slack:
        token: "{{ lookup('env', 'TOKEN') }}"
        msg: |
          ### Your LXC Container is READY!! ###
          --------------------------------------
          `Container`: "{{ HOSTNAME }}"
          {% if theip is defined %}
          `IP ADDRESS`: "{{ theip.stdout }}"
          'URL': ssh://user@{{ theip.stdout }}
          {% else %}
          `IP ADDRESS`: Not available
          'URL': Not available
          {% endif %}
          --------------------------------------
        channel: '#ansible'
        color: good
        username: 'Ansible on {{ inventory_hostname }}'
        link_names: 0
        parse: 'none'
      ignore_errors: true
